Switch changed to Routes, imported from same package (react-router-dom)

Route child components are no longer added within the bounds of Route, but instead as a property inside the Route tag, element: <Route><MyComponent></Route> becomes <Route element={<MyComponent />} />; important: the element must be a JSX tag, not an object. This also applies to primitive tags, such as p, div, etc. Basically all JSX code within the tags needs to be included in element

Exact property is included by default in Route components; the opposite of it has now been implemented, in the form of a way of defining a more general path with the help of * (ex: path='/product/*'); but even this approach is subjective to a more efficient algorithm that determines which is the best path to choose from the existing ones (ex: having two routes with paths '/product/*' and '/product/:id', accessing /product/id1 will redirect to the latter Route)

NavLink no longer has the activeClassName property; instead, in order to assign custom styling to the NavLink, we need to use an object that is given to us by React Rounting: navData. NavData contains multiple properties, amongst them being isActive, which tells us if the NavLink is the one active or not. We can then use that inside a function to determine which style to apply. ex: className={(navData) => navData.isActive ? <styling logic>}

Redirect is removed in version 6, replaced by Navigate. By default, <Navigate to=<path>/> will push the new page. To use replace, we can add replace inside the tag: <Navigate replace to=.../> Also, we need to add the Navigate in the element property of Route, as we do with custom components.

Nested Route's need to be encapsulated in a <Routes> tag now.

Routes that contain components with nested Routes need to have "/*" at the end of the path in order to indicate that they contain nested Routes. As a result, the Routes within the child components won't need to contain the root path. 
Ex: In version 5
Parent: <Route to="/product"/>   Child: <Route to="/product/new-product"/>
In version 6
Parent <Route to="product/*"/>   Child: <Route to="/new-product"/>

Same rules as above apply to Link elements path (<Link to=.../>)

Nested Routes can also be declared in the parent Route, with the addition of a new component inside the child: Outlet
In version 5:
Parent:
<Route...><ChildComp></Route>
Child:
<Route....>

In version 6:
Parent:
<Route...><Route...></Route></Route>
Child:
<Outlet/>

The Outlet basically tells React Router where a nested Route is expected

useHistory Hook is removed, replaced by useNavigate, which returns a function which we can call to navigate to another path.
Usage: 
const navigate = useNavigate()
navigate('/path');

If we want the replace functionality from useHistory, we can pass an object as an argument: navigate('/path', { replace: true })

navigate() also has the possibility to take numbers as arguments, to go down or up the path. Ex: navigate(-2) to go from /path2/path1/path0 to /path2

useBlocker(), usePrompt() and Prompt have been temporarily removed in version 6 and not replaced, so if we use version 6 and need a similar functionality we need to implement a custom one. Might be added later.



Router v6.4+ changes

Implementation of a loader property for Routes, which allows you to assign a fucntion that will execute automatically on component load. To make use of the data passed by this loader, we need to use the useLoaderData hook.

Nested Routes can now contain the index keyword, which means they are the root path for the parent Route
ex: <Route path='/'>
		<Route index/>
		<Route path='/products'/>
<Route/>
Accessing the root path ("/") will lead you to the first Route, while accessing the /products path will lead you to the second Route

For error handling, we now have the errorElement property in which we can either pass some JSX code or an actual custom component we can build for error handling. ex: <Route path=... errorElement={<JSX code/component>}/>. This can be put on every Route independently or on the root Route, so it will apply to children Routes as well. In case of error, the component is replaced by the Error Elements. So for example, if you have a nested Route that has an error element, in case of an error, only that Route is replaced by the error element. In case the error element is moved upwards in the hierarchy, to the root Route, the whole Route with all its children will be replaced by the error element.

We can also use useRouteError to get any error that was caught by the Route. It basically returns an error object that contains things such as message (like the actual error object thrown originally). Then we can use this error object to display the error inside our component


For Form submissions, a new Form component was added, which takes a number of properties, such as method and action. method defines the type of submission we want (get, put, post, etc) and the action points to a Route path that it will target. Inside of this Route we must also declare an action, which will be a function that will be called on form submission.
ex: <Form method="post" action="/product/new">...</Form>
<Route path="/product/new" action={<some_function>}/>

The insides of the Form are the same as with a normal form.

The action function we declare will receive a form object with a number of fields, amongst which is the request object that will contain all the data from the form. We will be able to extract data from this request object through the name properties of the form fields (ex: <input id=... name="inputName" .../>). To get these fields, we need to call the formData() function contained by the request.
ex: 
export async function action({request}) {
  const formData = await request.formData();
  const post = {
    title: formData.get('title'),
    body: formData.get('post-text')
  }
  try {
    await savePost(post)
  } catch(err) {
    if(err.status === 422) {
      // to be decided
      throw err;
    }
    throw err;
  }
  return redirect('/blog')
}

The redirect function is similar to useNavigation() in order to redirect the user after form submission, but we cannot use useNavigation so we use redirect(<path>) instead, which is also included in react-router-dom

When we throw an error, the whole page is refreshed and the error content is displayed. If we only want to append an error message to the current page, we can return the error instead of throwing it. Then we can retrieve the returned value with the help of useActionData(), which will contain our returned error object, which we can then append to our page to display the error.

ex: 

function OurComponent() {
	const data = useActionData();
	...
	return {data && <some_error_message>}....
}

export function action(...) {
	...
	try {
		...
	} catch (err) {
		return err;
	}
}

The logic is that we pass the action function inside the Route to OurComponent (<Route path=... element={OurComponent} action={action}/>), so useActionData will get the returned data from the action function.


Form State: this new version of Routing offers us another new hook: useNavigation (!not! useNagivate), which gives us an object that contains the state of the form, which means we don't need to manage it ourselves (ex: set state to submitting when we are submitting the form). The 3 states of navigation are: 'idle', 'loading' and 'submitting'



Deffered Pages:
Another feature in this new version is the ability to implement deferred pages. What that means is that if we access a page that requires a request to finish in order to get some data to be displayed, nothing will be displayed until the request is finished. A deffered page loads and will display the data when it is fetched. This is achieved by having different sections in our returned JSX code for the body of the page and the displayed data fetched by the request, and using a set of tools to display each element when available.
EX:



import { Suspense } from 'react';
import { useLoaderData, defer, Await } from 'react-router-dom';

import Posts from '../components/Posts';
import { getSlowPosts } from '../util/api';

function DeferredBlogPostsPage() {
  const loaderData = useLoaderData();

  return (
    <>
      <h1>Our Blog Posts</h1>
      <Suspense fallback={<p>Loading...</p>}>
        <Await
          resolve={loaderData.posts}
          errorElement={<p>Error loading blog posts.</p>}
        >
          {(loadedPosts) => <Posts blogPosts={loadedPosts} />}
        </Await>
      </Suspense>
    </>
  );
}

export default DeferredBlogPostsPage;

export async function loader() {
  return defer({ posts: getSlowPosts() });
}

In the above example, the page is rendered, showing the h1 element and the <p>Loading...</p> element until the data is fetched successfully. The fallback property takes JSX code or a component for that purpose, as a placeholder to be displayed until the resolve is finished.
The resolve inside the Await element is what determines when the contents of the Await are displayed. It can also get an errorElement property in case the request fails.
The deferred functionality is achieved because in the loader return, we call getSlowPosts() without await, so the program continues running without stopping to wait for the request, while the Await listens for the end result of this return. If we were to add await (posts: await getSlowPosts()), we would return to the normal behavior before implementing deferred pages: the whole page would only load when the request is finished.






